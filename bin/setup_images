#!/usr/bin/env python3

import sys, os, logging
from argparse import ArgumentParser

from images.database import init, password_hash
from images import Location, User

# Options
parser = ArgumentParser(usage="setup_images")
parser.add_argument('root', default=os.getenv('IMAGES_ROOT', None),
    help='specify a root folder for the application data')
parser.add_argument('-g', '--debug', action="store_true",
    help='show debug messages')

args = parser.parse_args()


logging.basicConfig(level=(logging.DEBUG if args.debug else logging.INFO))
data_root = args.root
sql_path = "sqlite:///" + os.path.join(data_root, 'images4.db')

logging.info("Data Root: %s", data_root)
logging.info("SQL Path: %s", sql_path)


# Setting up the database
logging.info("Connecting to the Database...")
db = init(sql_path)
logging.info("Creating tables...")
db.create_all()


# Adding default users and groups
logging.info("Setting up users and groups...")
with db.transaction() as t:
    if t.query(User).count() > 0:
        logging.info("Users table is already populated, skipping.")
    else:
        user = User(name="user", fullname="User", password=password_hash('user'))
        admin = User(name="admin", fullname="Admin", password=password_hash('admin'), user_class=User.Class.admin)
        guest = User(name="guest", fullname="Guest", password=password_hash('guest'), user_class=User.Class.guest)
        t.add(user)
        t.add(admin)


# Adding locations
logging.info("Setting up locations...")
with db.transaction() as t:
    if t.query(Location).count() > 0:
        logging.info("Location table is already populated, skipping.")
    else:
        drop_folder = Location(
            name="drop_folder",
            type=Location.Type.drop_folder,
            data=Location.DefaultLocationMetadata(
                folder=os.path.join(data_root, 'drop_folder'),
                auto_tag=True,
                auto_user=True,
                user_id=1,
            ).to_json()
        )
        image = Location(
            name="images",
            type=Location.Type.image,
            data=Location.DefaultLocationMetadata(
                folder=os.path.join(data_root, 'image')
            ).to_json()
        )
        video = Location(
            name="video",
            type=Location.Type.video,
            data=Location.DefaultLocationMetadata(
                folder=os.path.join(data_root, 'video')
            ).to_json()
        )
        proxy = Location(
            name="proxy",
            type=Location.Type.proxy,
            data=Location.DefaultLocationMetadata(
                folder=os.path.join(data_root, 'proxy')
            ).to_json()
        )
        thumb = Location(
            name="thumb",
            type=Location.Type.thumb,
            data=Location.DefaultLocationMetadata(
                folder=os.path.join(data_root, 'thumb')
            ).to_json()
        )
        t.add(drop_folder)
        t.add(image)
        t.add(video)
        t.add(proxy)
        t.add(thumb)


logging.info("Done.")
